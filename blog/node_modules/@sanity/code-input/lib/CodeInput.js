"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _changeIndicators = require("@sanity/base/change-indicators");

var _PatchEvent = _interopRequireWildcard(require("@sanity/form-builder/PatchEvent"));

var _reactAce = _interopRequireDefault(require("react-ace"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _autoId = require("@reach/auto-id");

var _createHighlightMarkers = _interopRequireWildcard(require("./createHighlightMarkers"));

require("./editorSupport");

var _config = require("./config");

var _templateObject;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var EditorContainer = (0, _styledComponents.default)(_ui.Card)(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  box-sizing: border-box;\n  overflow: hidden;\n  z-index: 0;\n\n  .ace_editor {\n    font-family: ", ";\n    font-size: ", ";\n    line-height: inherit;\n  }\n\n  ", "\n\n  &:not([disabled]):not([readonly]) {\n    &:focus,\n    &:focus-within {\n      box-shadow: 0 0 0 2px ", ";\n      background-color: ", ";\n      border-color: ", ";\n    }\n  }\n"])), _ref => {
  var theme = _ref.theme;
  return theme.sanity.fonts.code.family;
}, _ref2 => {
  var theme = _ref2.theme;
  return theme.sanity.fonts.code.sizes[1];
}, _createHighlightMarkers.highlightMarkersCSS, _ref3 => {
  var theme = _ref3.theme;
  return theme.sanity.color.base.focusRing;
}, _ref4 => {
  var theme = _ref4.theme;
  return theme.sanity.color.base.bg;
}, _ref5 => {
  var theme = _ref5.theme;
  return theme.sanity.color.base.focusRing;
});

// Returns a string with the mode name if supported (because aliases), otherwise false
function isSupportedLanguage(mode) {
  var alias = _config.LANGUAGE_ALIASES[mode];

  if (alias) {
    return alias;
  }

  var isSupported = _config.SUPPORTED_LANGUAGES.find(lang => lang.value === mode);

  if (isSupported) {
    return mode;
  }

  return false;
}

var CodeInput = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  var _props$value, _type$options5, _type$options6, _type$options7;

  var aceEditorRef = (0, _react.useRef)();
  var aceEditorId = (0, _autoId.useId)();
  var onFocus = props.onFocus,
      onChange = props.onChange,
      onBlur = props.onBlur,
      compareValue = props.compareValue,
      value = props.value,
      presence = props.presence,
      type = props.type,
      level = props.level,
      readOnly = props.readOnly,
      focusPath = props.focusPath;
  (0, _react.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _aceEditorRef$current, _aceEditorRef$current2;

      aceEditorRef === null || aceEditorRef === void 0 ? void 0 : (_aceEditorRef$current = aceEditorRef.current) === null || _aceEditorRef$current === void 0 ? void 0 : (_aceEditorRef$current2 = _aceEditorRef$current.editor) === null || _aceEditorRef$current2 === void 0 ? void 0 : _aceEditorRef$current2.focus();
    }
  }));
  var handleLanguageFocus = (0, _react.useCallback)(() => {
    onFocus(_config.PATH_LANGUAGE);
  }, [onFocus]);
  var handleCodeFocus = (0, _react.useCallback)(() => {
    onFocus(_config.PATH_CODE);
  }, [onFocus]);
  var handleFilenameFocus = (0, _react.useCallback)(() => {
    onFocus(_config.PATH_FILENAME);
  }, [onFocus]);
  var handleFilenameChange = (0, _react.useCallback)(event => {
    var val = event.target.value;
    var path = _config.PATH_FILENAME;
    onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
      _type: type.name
    }), val ? (0, _PatchEvent.set)(val, path) : (0, _PatchEvent.unset)(path)]));
  }, [onChange, type.name]);
  var getTheme = (0, _react.useCallback)(() => {
    var _type$options;

    var preferredTheme = (_type$options = type.options) === null || _type$options === void 0 ? void 0 : _type$options.theme;
    return preferredTheme && _config.SUPPORTED_THEMES.find(theme => theme === preferredTheme) ? preferredTheme : _config.DEFAULT_THEME;
  }, [type]);
  var handleToggleSelectLine = (0, _react.useCallback)(lineNumber => {
    var _aceEditorRef$current3, _aceEditorRef$current4;

    var editorSession = (_aceEditorRef$current3 = aceEditorRef.current) === null || _aceEditorRef$current3 === void 0 ? void 0 : (_aceEditorRef$current4 = _aceEditorRef$current3.editor) === null || _aceEditorRef$current4 === void 0 ? void 0 : _aceEditorRef$current4.getSession();
    var backgroundMarkers = editorSession === null || editorSession === void 0 ? void 0 : editorSession.getMarkers(true);
    var currentHighlightedLines = Object.keys(backgroundMarkers).filter(key => backgroundMarkers[key].type === 'screenLine').map(key => backgroundMarkers[key].range.start.row);
    var currentIndex = currentHighlightedLines.indexOf(lineNumber);

    if (currentIndex > -1) {
      // toggle remove
      currentHighlightedLines.splice(currentIndex, 1);
    } else {
      // toggle add
      currentHighlightedLines.push(lineNumber);
      currentHighlightedLines.sort();
    }

    onChange(_PatchEvent.default.from((0, _PatchEvent.set)(currentHighlightedLines.map(line => // ace starts at line (row) 0, but we store it starting at line 1
    line + 1), ['highlightedLines'])));
  }, [aceEditorRef, onChange]);
  var handleGutterMouseDown = (0, _react.useCallback)(event => {
    var target = event.domEvent.target;

    if (target.classList.contains('ace_gutter-cell')) {
      var row = event.getDocumentPosition().row;
      handleToggleSelectLine(row);
    }
  }, [handleToggleSelectLine]);
  (0, _react.useEffect)(() => {
    var _aceEditorRef$current5;

    var editor = aceEditorRef === null || aceEditorRef === void 0 ? void 0 : (_aceEditorRef$current5 = aceEditorRef.current) === null || _aceEditorRef$current5 === void 0 ? void 0 : _aceEditorRef$current5.editor;
    return () => {
      var _editor$session;

      editor === null || editor === void 0 ? void 0 : (_editor$session = editor.session) === null || _editor$session === void 0 ? void 0 : _editor$session.removeListener('guttermousedown', handleGutterMouseDown);
    };
  }, [aceEditorRef, handleGutterMouseDown]);
  var handleEditorLoad = (0, _react.useCallback)(editor => {
    editor === null || editor === void 0 ? void 0 : editor.on('guttermousedown', handleGutterMouseDown);
  }, [handleGutterMouseDown]);
  var getLanguageAlternatives = (0, _react.useCallback)(() => {
    var _type$options2;

    var languageAlternatives = (_type$options2 = type.options) === null || _type$options2 === void 0 ? void 0 : _type$options2.languageAlternatives;

    if (!languageAlternatives) {
      return _config.SUPPORTED_LANGUAGES;
    }

    if (!Array.isArray(languageAlternatives)) {
      throw new Error("'options.languageAlternatives' should be an array, got ".concat(typeof languageAlternatives));
    }

    return languageAlternatives.reduce((acc, _ref6) => {
      var title = _ref6.title,
          val = _ref6.value,
          mode = _ref6.mode;
      var alias = _config.LANGUAGE_ALIASES[val];

      if (alias) {
        // eslint-disable-next-line no-console
        console.warn("'options.languageAlternatives' lists a language with value \"%s\", which is an alias of \"%s\" - please replace the value to read \"%s\"", val, alias, alias);
        return acc.concat({
          title,
          value: alias,
          mode: mode
        });
      }

      if (!mode && !_config.SUPPORTED_LANGUAGES.find(lang => lang.value === val)) {
        // eslint-disable-next-line no-console
        console.warn("'options.languageAlternatives' lists a language which is not supported: \"%s\", syntax highlighting will be disabled.", val);
      }

      return acc.concat({
        title,
        value: val,
        mode
      });
    }, []);
  }, [type]);
  var handleCodeChange = (0, _react.useCallback)(code => {
    var _type$options3;

    var path = _config.PATH_CODE;
    var fixedLanguage = (_type$options3 = type.options) === null || _type$options3 === void 0 ? void 0 : _type$options3.language;
    onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
      _type: type.name,
      language: fixedLanguage
    }), code ? (0, _PatchEvent.set)(code, path) : (0, _PatchEvent.unset)(path)]));
  }, [onChange, type]);
  var handleLanguageChange = (0, _react.useCallback)(event => {
    var val = event.currentTarget.value;
    var path = _config.PATH_LANGUAGE;
    onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
      _type: type.name
    }), val ? (0, _PatchEvent.set)(val, path) : (0, _PatchEvent.unset)(path)]));
  }, [onChange, type.name]);
  var languages = getLanguageAlternatives().slice();
  var selectedLanguage = props !== null && props !== void 0 && (_props$value = props.value) !== null && _props$value !== void 0 && _props$value.language ? languages.find(item => {
    var _props$value2;

    return item.value === (props === null || props === void 0 ? void 0 : (_props$value2 = props.value) === null || _props$value2 === void 0 ? void 0 : _props$value2.language);
  }) : undefined;
  var languageField = type.fields.find(field => field.name === 'language');
  var filenameField = type.fields.find(field => field.name === 'filename');
  var languageCompareValue = PathUtils.get(compareValue, _config.PATH_LANGUAGE);
  var codeCompareValue = PathUtils.get(compareValue, _config.PATH_CODE);
  var filenameCompareValue = PathUtils.get(compareValue, _config.PATH_FILENAME);
  var languagePresence = presence.filter(presenceItem => PathUtils.startsWith(_config.PATH_LANGUAGE, presenceItem.path));
  var codePresence = presence.filter(presenceItem => PathUtils.startsWith(_config.PATH_CODE, presenceItem.path));
  var filenamePresence = presence.filter(presenceItem => PathUtils.startsWith(_config.PATH_FILENAME, presenceItem.path));
  var renderLanguageAlternatives = (0, _react.useCallback)(() => {
    return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorProvider, {
      path: _config.PATH_LANGUAGE,
      focusPath: focusPath,
      value: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.value,
      compareValue: languageCompareValue
    }, /*#__PURE__*/_react.default.createElement(_components.FormField, {
      level: level + 1,
      label: (languageField === null || languageField === void 0 ? void 0 : languageField.title) || 'Language',
      __unstable_presence: languagePresence
    }, /*#__PURE__*/_react.default.createElement(_ui.Select, {
      onChange: handleLanguageChange,
      readOnly: readOnly,
      value: (selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.value) || '',
      onFocus: handleLanguageFocus,
      onBlur: onBlur
    }, languages.map(lang => /*#__PURE__*/_react.default.createElement("option", {
      key: lang.value,
      value: lang.value
    }, lang.title)))));
  }, [focusPath, handleLanguageChange, handleLanguageFocus, languageCompareValue, languageField === null || languageField === void 0 ? void 0 : languageField.title, languagePresence, languages, level, onBlur, readOnly, selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.value]);
  var renderFilenameInput = (0, _react.useCallback)(() => {
    return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorProvider, {
      path: _config.PATH_FILENAME,
      focusPath: focusPath,
      value: value === null || value === void 0 ? void 0 : value.filename,
      compareValue: filenameCompareValue
    }, /*#__PURE__*/_react.default.createElement(_components.FormField, {
      label: (filenameField === null || filenameField === void 0 ? void 0 : filenameField.title) || 'Filename',
      level: level + 1,
      __unstable_presence: filenamePresence
    }, /*#__PURE__*/_react.default.createElement(_ui.TextInput, {
      name: "filename",
      value: (value === null || value === void 0 ? void 0 : value.filename) || '',
      placeholder: filenameField === null || filenameField === void 0 ? void 0 : filenameField.placeholder,
      onChange: handleFilenameChange,
      onFocus: handleFilenameFocus,
      onBlur: onBlur
    })));
  }, [filenameCompareValue, filenameField === null || filenameField === void 0 ? void 0 : filenameField.placeholder, filenameField === null || filenameField === void 0 ? void 0 : filenameField.title, filenamePresence, focusPath, handleFilenameChange, handleFilenameFocus, level, onBlur, value === null || value === void 0 ? void 0 : value.filename]);
  var renderEditor = (0, _react.useCallback)(() => {
    var _type$options4;

    var fixedLanguage = (_type$options4 = type.options) === null || _type$options4 === void 0 ? void 0 : _type$options4.language;
    var language = (value === null || value === void 0 ? void 0 : value.language) || fixedLanguage; // the language config from the schema

    var configured = languages.find(entry => entry.value === language); // is the language officially supported (e.g. we import the mode by default)

    var supported = language && isSupportedLanguage(language);
    var mode = (configured === null || configured === void 0 ? void 0 : configured.mode) || (supported ? supported : 'text');
    return /*#__PURE__*/_react.default.createElement(_changeIndicators.ChangeIndicatorProvider, {
      path: _config.PATH_CODE,
      focusPath: focusPath,
      value: value === null || value === void 0 ? void 0 : value.code,
      compareValue: codeCompareValue
    }, /*#__PURE__*/_react.default.createElement(_components.FormField, {
      label: "Code",
      level: level + 1,
      __unstable_presence: codePresence
    }, /*#__PURE__*/_react.default.createElement(EditorContainer, {
      radius: 1,
      shadow: 1,
      readOnly: readOnly
    }, /*#__PURE__*/_react.default.createElement(_reactAce.default, {
      ref: aceEditorRef,
      mode: mode,
      theme: getTheme(),
      width: "100%",
      onChange: handleCodeChange,
      name: "editor-".concat(aceEditorId),
      value: value && value.code || '',
      markers: value && value.highlightedLines ? (0, _createHighlightMarkers.default)(value.highlightedLines) : undefined,
      onLoad: handleEditorLoad,
      readOnly: readOnly,
      tabSize: 2,
      wrapEnabled: true,
      setOptions: _config.ACE_SET_OPTIONS,
      editorProps: _config.ACE_EDITOR_PROPS,
      onFocus: handleCodeFocus,
      onBlur: onBlur
    }))));
  }, [(_type$options5 = type.options) === null || _type$options5 === void 0 ? void 0 : _type$options5.language, value, languages, focusPath, codeCompareValue, level, codePresence, readOnly, getTheme, handleCodeChange, aceEditorId, handleEditorLoad, handleCodeFocus, onBlur]);
  return /*#__PURE__*/_react.default.createElement(_components.FormFieldSet, {
    title: type.title,
    description: type.description,
    level: level,
    __unstable_changeIndicator: false
  }, !((_type$options6 = type.options) !== null && _type$options6 !== void 0 && _type$options6.language) && renderLanguageAlternatives(), (type === null || type === void 0 ? void 0 : (_type$options7 = type.options) === null || _type$options7 === void 0 ? void 0 : _type$options7.withFilename) && renderFilenameInput(), renderEditor());
});

CodeInput.displayName = 'CodeInput';
var _default = CodeInput;
exports.default = _default;
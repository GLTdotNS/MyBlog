"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validateBlockType;

var _isPlainObject2 = _interopRequireDefault(require("lodash/isPlainObject"));

var _omit2 = _interopRequireDefault(require("lodash/omit"));

var _humanizeList = _interopRequireDefault(require("humanize-list"));

var _createValidationResult = require("../createValidationResult");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getTypeOf = thing => Array.isArray(thing) ? 'array' : typeof thing;

const quote = str => `"${str}"`;

const allowedKeys = ['type', 'styles', 'marks', 'lists', 'of', 'title', 'name'];
const allowedMarkKeys = ['decorators', 'annotations'];
const allowedStyleKeys = ['title', 'value', 'blockEditor'];
const allowedDecoratorKeys = ['title', 'value', 'blockEditor'];

function validateBlockType(typeDef, visitorContext) {
  const problems = [];
  let styles = typeDef.styles;
  let marks = typeDef.marks;
  let members = typeDef.of;
  const disallowedKeys = Object.keys(typeDef).filter(key => !allowedKeys.includes(key) && !key.startsWith('_'));

  if (disallowedKeys.length > 0) {
    problems.push((0, _createValidationResult.error)(`Found unknown properties for block declaration: ${(0, _humanizeList.default)(disallowedKeys.map(quote))}`));
  }

  if (marks) {
    marks = validateMarks(typeDef.marks, visitorContext, problems);
  }

  if (styles) {
    styles = validateStyles(styles, visitorContext, problems);
  }

  if (members) {
    members = validateMembers(members, visitorContext, problems);
  }

  return _objectSpread({}, (0, _omit2.default)(typeDef, disallowedKeys), {
    marks,
    styles,
    of: members,
    _problems: problems
  });
}

function validateMarks(marks, visitorContext, problems) {
  let decorators = marks.decorators;
  let annotations = marks.annotations;

  if (!(0, _isPlainObject2.default)(marks)) {
    problems.push((0, _createValidationResult.error)(`"marks" declaration should be an object, got ${getTypeOf(marks)}`));
    return problems;
  }

  const disallowedMarkKeys = Object.keys(marks).filter(key => !allowedMarkKeys.includes(key) && !key.startsWith('_'));

  if (disallowedMarkKeys.length > 0) {
    problems.push((0, _createValidationResult.error)(`Found unknown properties for block declaration: ${(0, _humanizeList.default)(disallowedMarkKeys.map(quote))}`));
  }

  if (decorators && !Array.isArray(decorators)) {
    problems.push((0, _createValidationResult.error)(`"marks.decorators" declaration should be an array, got ${getTypeOf(decorators)}`));
  } else if (decorators) {
    decorators = validateDecorators(decorators, visitorContext, problems);
  }

  if (annotations && !Array.isArray(annotations)) {
    problems.push((0, _createValidationResult.error)(`"marks.annotations" declaration should be an array, got ${getTypeOf(annotations)}`));
  } else if (annotations) {
    annotations = validateAnnotations(annotations, visitorContext, problems);
  }

  return _objectSpread({}, marks, {
    decorators,
    annotations
  });
}

function validateStyles(styles, visitorContext, problems) {
  if (!Array.isArray(styles)) {
    problems.push((0, _createValidationResult.error)(`"styles" declaration should be an array, got ${getTypeOf(styles)}`));
    return problems;
  }

  styles.forEach((style, index) => {
    if (!(0, _isPlainObject2.default)(style)) {
      problems.push((0, _createValidationResult.error)(`Style must be an object, got ${getTypeOf(style)}`));
      return;
    }

    const name = style.value || `#${index}`;
    const disallowedKeys = Object.keys(style).filter(key => !allowedStyleKeys.includes(key) && !key.startsWith('_'));

    if (disallowedKeys.length > 0) {
      problems.push((0, _createValidationResult.error)(`Found unknown properties for style ${name}: ${(0, _humanizeList.default)(disallowedKeys.map(quote))}`));
    }

    if (!style.value) {
      problems.push((0, _createValidationResult.error)(`Style #${index} is missing required "value" property`));
    } else if (typeof style.value !== 'string') {
      problems.push((0, _createValidationResult.error)(`Style #${index} has an invalid "value" property, expected string, got ${getTypeOf(style.value)}`));
    } else if (!style.title) {
      problems.push((0, _createValidationResult.warning)(`Style ${name} is missing recommended "title" property`));
    }
  });
  return styles;
}

function validateDecorators(decorators, visitorContext, problems) {
  decorators.forEach((decorator, index) => {
    if (!(0, _isPlainObject2.default)(decorator)) {
      problems.push((0, _createValidationResult.error)(`Annotation must be an object, got ${getTypeOf(decorator)}`));
      return;
    }

    const name = decorator.value || `#${index}`;
    const disallowedKeys = Object.keys(decorator).filter(key => !allowedDecoratorKeys.includes(key) && !key.startsWith('_'));

    if (disallowedKeys.length > 0) {
      problems.push((0, _createValidationResult.error)(`Found unknown properties for decorator ${name}: ${(0, _humanizeList.default)(disallowedKeys.map(quote))}`));
    }

    if (!decorator.value) {
      problems.push((0, _createValidationResult.error)(`Decorator #${index} is missing required "value" property`));
    } else if (typeof decorator.value !== 'string') {
      problems.push((0, _createValidationResult.error)(`Decorator #${index} has an invalid "value" property, expected string, got ${getTypeOf(decorator.value)}`));
    } else if (!decorator.title) {
      problems.push((0, _createValidationResult.warning)(`Decorator ${name} is missing recommended "title" property`));
    }
  });
  return decorators;
}

function validateAnnotations(annotations, visitorContext, problems) {
  return annotations.map(annotation => {
    if (!(0, _isPlainObject2.default)(annotation)) {
      return _objectSpread({}, annotation, {
        _problems: [(0, _createValidationResult.error)(`Annotation must be an object, got ${getTypeOf(annotation)}`)]
      });
    }

    const _visitorContext$visit = visitorContext.visit(annotation, visitorContext),
          _problems = _visitorContext$visit._problems;

    const targetType = annotation.type && visitorContext.getType(annotation.type);

    if (targetType && targetType.jsonType !== 'object') {
      _problems.push((0, _createValidationResult.error)(`Annotation cannot have type "${annotation.type}" - annotation types must inherit from object`));
    }

    return _objectSpread({}, annotation, {
      _problems
    });
  });
}

function validateMembers(members, visitorContext, problems) {
  if (!Array.isArray(members)) {
    problems.push((0, _createValidationResult.error)(`"of" declaration should be an array, got ${getTypeOf(members)}`));
    return undefined;
  }

  return members.map(member => {
    const _visitorContext$visit2 = visitorContext.visit(member, visitorContext),
          _problems = _visitorContext$visit2._problems;

    return _objectSpread({}, member, {
      _problems
    });
  });
}